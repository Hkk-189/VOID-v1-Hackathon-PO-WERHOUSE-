import 'package:flutter/material.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'dart:convert';
import '../models/user.dart';
import '../models/transaction.dart';

class HiveService {
  static const String _userBoxName = 'users';
  static const String _transactionBoxName = 'transactions';
  static const String _settingsBoxName = 'settings';
  static const String _credentialsBoxName = 'credentials';
  static const _secureStorage = FlutterSecureStorage();

  static Future<void> init() async {
    await Hive.initFlutter();

    // Register adapters (generated by build_runner)
    if (!Hive.isAdapterRegistered(0)) {
      Hive.registerAdapter(AppUserAdapter());
    }
    if (!Hive.isAdapterRegistered(1)) {
      Hive.registerAdapter(PaymentTransactionAdapter());
    }

    // Get or generate encryption key
    var encryptionKey = await _secureStorage.read(key: 'hive_encryption_key');
    if (encryptionKey == null) {
      final key = Hive.generateSecureKey();
      encryptionKey = base64Encode(key);
      await _secureStorage.write(key: 'hive_encryption_key', value: encryptionKey);
    }

    final key = base64Decode(encryptionKey);

    // Open encrypted boxes
    await Hive.openBox<AppUser>(_userBoxName, encryptionCipher: HiveAesCipher(key));
    await Hive.openBox<PaymentTransaction>(_transactionBoxName, encryptionCipher: HiveAesCipher(key));
    await Hive.openBox(_settingsBoxName, encryptionCipher: HiveAesCipher(key));
    await Hive.openBox(_credentialsBoxName, encryptionCipher: HiveAesCipher(key));
  }

  // User operations
  static Future<void> saveUser(AppUser user) async {
    final box = Hive.box<AppUser>(_userBoxName);
    await box.put('current_user', user);
  }

  static AppUser? getCurrentUser() {
    final box = Hive.box<AppUser>(_userBoxName);
    return box.get('current_user');
  }

  static Future<void> deleteUser() async {
    final box = Hive.box<AppUser>(_userBoxName);
    await box.delete('current_user');
  }

  // Credentials operations
  static Future<void> saveCredentials(String username, String hashedPassword) async {
    final box = Hive.box(_credentialsBoxName);
    await box.put('username', username);
    await box.put('password', hashedPassword);
    await box.put('device_id', await _getDeviceId());
  }

  static Future<Map<String, String>?> getCredentials() async {
    final box = Hive.box(_credentialsBoxName);
    final username = box.get('username');
    final password = box.get('password');
    if (username == null || password == null) return null;
    return {'username': username, 'password': password};
  }

  static Future<String> _getDeviceId() async {
    var deviceId = await _secureStorage.read(key: 'device_id');
    if (deviceId == null) {
      deviceId = DateTime.now().millisecondsSinceEpoch.toString();
      await _secureStorage.write(key: 'device_id', value: deviceId);
    }
    return deviceId;
  }

  // Transaction operations
  static Future<void> saveTransaction(PaymentTransaction transaction) async {
    final box = Hive.box<PaymentTransaction>(_transactionBoxName);
    await box.put(transaction.id, transaction);
  }

  static List<PaymentTransaction> getAllTransactions() {
    final box = Hive.box<PaymentTransaction>(_transactionBoxName);
    return box.values.toList();
  }

  static List<PaymentTransaction> getTransactionsByStatus(TxStatus status) {
    final box = Hive.box<PaymentTransaction>(_transactionBoxName);
    return box.values.where((tx) => tx.status == status).toList();
  }

  static Future<List<PaymentTransaction>> getUnsyncedTransactions() async {
    final box = Hive.box<PaymentTransaction>(_transactionBoxName);
    return box.values.where((tx) => !tx.synced).toList();
  }

  static PaymentTransaction? getTransaction(String id) {
    final box = Hive.box<PaymentTransaction>(_transactionBoxName);
    return box.get(id);
  }

  // Settings operations
  static Future<void> saveThemeMode(ThemeMode mode) async {
    final box = Hive.box(_settingsBoxName);
    await box.put('theme_mode', mode.index);
  }

  static Future<ThemeMode> getThemeMode() async {
    final box = Hive.box(_settingsBoxName);
    final index = box.get('theme_mode', defaultValue: 0);
    return ThemeMode.values[index];
  }

  static Future<void> saveAccentColor(Color color) async {
    final box = Hive.box(_settingsBoxName);
    await box.put('accent_color', color.value);
  }

  static Future<Color> getAccentColor() async {
    final box = Hive.box(_settingsBoxName);
    final value = box.get('accent_color', defaultValue: Colors.blue.value);
    return Color(value);
  }

  static Future<void> saveLanguage(String lang) async {
    final box = Hive.box(_settingsBoxName);
    await box.put('language', lang);
  }

  static Future<String> getLanguage() async {
    final box = Hive.box(_settingsBoxName);
    return box.get('language', defaultValue: 'en');
  }

  static Future<void> saveBiometricEnabled(bool enabled) async {
    final box = Hive.box(_settingsBoxName);
    await box.put('biometric_enabled', enabled);
  }

  static Future<bool> getBiometricEnabled() async {
    final box = Hive.box(_settingsBoxName);
    return box.get('biometric_enabled', defaultValue: true);
  }

  static Future<void> saveAutoLockMinutes(int minutes) async {
    final box = Hive.box(_settingsBoxName);
    await box.put('auto_lock_minutes', minutes);
  }

  static Future<int> getAutoLockMinutes() async {
    final box = Hive.box(_settingsBoxName);
    return box.get('auto_lock_minutes', defaultValue: 5);
  }

  static Future<void> clearAllData() async {
    await Hive.box<AppUser>(_userBoxName).clear();
    await Hive.box<PaymentTransaction>(_transactionBoxName).clear();
    await Hive.box(_credentialsBoxName).clear();
  }
}
